version: "3.9"

secrets:
  postgres_password:
    file: ./secrets/postgres_password

networks:
  internal:
    driver: bridge
    internal: true

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    user: "1000:1000"
    command: uv run uvicorn apps.api.app.main:app --host 0.0.0.0 --port 8000
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    secrets:
      - postgres_password
    networks:
      - internal

  postgres:
    image: postgres:16
    user: "999"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: agentflow
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    secrets:
      - postgres_password
    networks:
      - internal

  redis:
    image: redis:7
    command: redis-server --appendonly yes
    user: "999"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal

  qdrant:
    image: qdrant/qdrant:latest
    user: "1000"
    volumes:
      - qdrant_storage:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal

  neo4j:
    image: neo4j:5
    user: "7474"
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD}
    volumes:
      - neo4j_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7474"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal

  r2r:
    image: sciphi/r2r:latest
    user: "1000"
    environment:
      R2R_CONFIG_NAME: full
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      POSTGRES_USER: postgres
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DBNAME: agentflow
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "7272:7272"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7272/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    secrets:
      - postgres_password
    networks:
      - internal

volumes:
  postgres_data:
  redis_data:
  qdrant_storage:
  neo4j_data:
