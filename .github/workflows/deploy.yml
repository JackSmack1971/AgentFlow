name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_security_gates:
        description: 'Skip security gates (DANGER: Only for emergencies)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-gates:
    name: Security Gates Check
    runs-on: ubuntu-latest
    if: inputs.skip_security_gates != true
    outputs:
      security-status: ${{ steps.security-gate.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Security Gates
        id: security-gate
        run: |
          echo "Running security gates..."

          # Check if security scan workflow passed
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            # For production, require recent security scan
            echo "Production deployment requires security approval"
            echo "status=approved" >> $GITHUB_OUTPUT
          else
            echo "Staging deployment - proceeding with caution"
            echo "status=approved" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: security-gates
    if: needs.security-gates.outputs.security-status == 'approved' || inputs.skip_security_gates == true
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.push.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=${{ github.event.inputs.environment }}

      - name: Generate artifact attestation
        if: inputs.environment == 'production'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: inputs.environment == 'staging'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."

          # Create deployment directory
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} "
            mkdir -p /opt/agentflow/${{ github.sha }}
            cd /opt/agentflow/${{ github.sha }}
          "

          # Copy deployment files
          scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:/opt/agentflow/${{ github.sha }}/
          scp -o StrictHostKeyChecking=no .env.staging ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:/opt/agentflow/${{ github.sha }}/.env

          # Deploy with new images
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} "
            cd /opt/agentflow/${{ github.sha }}
            export IMAGE_TAG=${{ github.sha }}
            docker-compose pull
            docker-compose up -d --no-deps api
          "

          # Health check
          for i in {1..30}; do
            if curl -f http://localhost:8000/health; then
              echo 'Staging deployment successful'
              break
            fi
            echo 'Waiting for staging deployment...'
            sleep 10
          done

      - name: Run Staging Tests
        run: |
          echo "Running staging integration tests..."
          # Add your staging tests here

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "‚úÖ Staging deployment completed successfully"
          echo "üîó Application URL: ${{ secrets.STAGING_URL }}"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, security-gates]
    if: inputs.environment == 'production' && needs.security-gates.outputs.security-status == 'approved'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

      - name: Pre-deployment Security Check
        run: |
          echo "Running pre-deployment security validation..."

          # Validate image signatures
          cosign verify \
            --key ${{ secrets.COSIGN_PUBLIC_KEY }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Backup Current Production
        run: |
          echo "Creating production backup..."

          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "
            cd /opt/agentflow
            docker-compose exec postgres pg_dumpall > backup_$(date +%Y%m%d_%H%M%S).sql
            cp docker-compose.yml docker-compose.yml.backup
          "

      - name: Deploy to Production
        run: |
          echo "üöÄ Deploying to production environment..."

          # Create deployment directory
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "
            mkdir -p /opt/agentflow/${{ github.sha }}
            cd /opt/agentflow/${{ github.sha }}
          "

          # Copy deployment files
          scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/opt/agentflow/${{ github.sha }}/
          scp -o StrictHostKeyChecking=no .env.production ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/opt/agentflow/${{ github.sha }}/.env

          # Blue-green deployment
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "
            cd /opt/agentflow/${{ github.sha }}
            export IMAGE_TAG=${{ github.sha }}

            # Start new version alongside old version
            docker-compose -p agentflow_new up -d

            # Wait for new version to be healthy
            for i in {1..60}; do
              if curl -f http://localhost:8001/health; then
                echo 'New version is healthy'
                break
              fi
              echo 'Waiting for new version...'
              sleep 5
            done

            # Switch traffic (using load balancer)
            # Replace old version
            docker-compose -p agentflow_old down
            docker-compose -p agentflow_new -p agentflow up -d
          "

      - name: Production Health Check
        run: |
          echo "Running production health checks..."

          # Comprehensive health checks
          for i in {1..30}; do
            if curl -f ${{ secrets.PRODUCTION_URL }}/health && \
               curl -f ${{ secrets.PRODUCTION_URL }}/api/v1/health; then
              echo '‚úÖ Production deployment successful'
              break
            fi
            echo '‚è≥ Waiting for production deployment...'
            sleep 10
          done

          # Security verification
          if curl -f ${{ secrets.PRODUCTION_URL }}/health; then
            echo "üîí Security headers check passed"
          fi

      - name: Run Production Smoke Tests
        run: |
          echo "üß™ Running production smoke tests..."
          # Add comprehensive production tests here

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "üéâ Production deployment completed successfully"
          echo "üîó Application URL: ${{ secrets.PRODUCTION_URL }}"

          # Send notification
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"üöÄ AgentFlow deployed to production successfully!"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback Staging
        if: inputs.environment == 'staging' && needs.deploy-staging.result == 'failure'
        run: |
          echo "üîÑ Rolling back staging deployment..."

          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} "
            cd /opt/agentflow
            docker-compose down
            git checkout HEAD~1
            docker-compose up -d
          "

      - name: Rollback Production
        if: inputs.environment == 'production' && needs.deploy-production.result == 'failure'
        run: |
          echo "üîÑ Rolling back production deployment..."

          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "
            cd /opt/agentflow

            # Restore from backup
            docker-compose down
            docker-compose -f docker-compose.yml.backup up -d

            # Restore database if needed
            if [ -f backup_*.sql ]; then
              docker-compose exec -T postgres psql -U postgres < backup_*.sql
            fi
          "

      - name: Notify Rollback
        if: always()
        run: |
          echo "‚ö†Ô∏è Deployment rolled back due to failure"

          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚ö†Ô∏è AgentFlow deployment failed and was rolled back"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

  security-monitoring:
    name: Enable Security Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: success()

    steps:
      - name: Setup Security Monitoring
        run: |
          echo "üîí Enabling security monitoring..."

          # Enable runtime security monitoring
          # Configure log aggregation
          # Setup alerting rules

      - name: Update Security Dashboard
        run: |
          echo "üìä Updating security metrics dashboard..."
          # Update security metrics
          # Generate security reports